[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html",
    "href": "content/01_journal/01_ml_fund.html",
    "title": "01 Machine Learning Fundamentals",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/01_ml_fund.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\n\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>% \n    select(symbol, date, adjusted) %>%          \n    filter(date >= \"2018-01-01\") %>%            \n    group_by(symbol) %>% \n    mutate(adj_lag = lag(adjusted)) %>% \n    filter(!is.na(adj_lag)) %>% \n    mutate(diff = adjusted - adj_lag,\n           pct_return = diff / adj_lag) %>% \n    select(symbol, date, pct_return)\n\nsp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/01_ml_fund.html#step-2---convert-to-user-item-format",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"raw_data/sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>% \n    pivot_wider(names_from = date,\n                values_from = pct_return,\n                values_fill = list(pct_return = 0))\nstock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/01_ml_fund.html#step-3---perform-k-means-clustering",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"raw_data/stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj <- stock_date_matrix_tbl %>% \n    select(-symbol) %>% \n    kmeans(centers = 4, nstart = 20)\nkmeans_obj %>% glance()\n\n\n\n  \n\n\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/01_ml_fund.html#step-4---find-the-optimal-value-of-k",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\n# Use purrr to map\nk_means_mapped_tbl <- tibble(centers = 1:30) %>% \n    mutate(k_means = centers %>% map(kmeans_mapper),\n           glance = k_means %>% map(glance))\n\n\nk_means_mapped_tbl \n\n\n\n  \n\n\n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %>% \n    unnest(glance) %>% \n    ggplot(aes(x = centers, y = tot.withinss)) +\n    geom_point() +\n    geom_line()\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html#step-5---apply-umap",
    "href": "content/01_journal/01_ml_fund.html#step-5---apply-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\n# Store results as: umap_results \numap_results <- stock_date_matrix_tbl %>%\n  select(-c(symbol)) %>%\n  umap()\n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl <- umap_results$layout %>%\n  as_tibble() %>%\n  bind_cols(stock_date_matrix_tbl %>% select(symbol))\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %>%\n  ggplot(aes(x = V1, y = V2)) +\n  geom_point(alpha = 0.5) +\n  theme_tq() +\n  labs(title = \"UMAP Projection\")\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/01_ml_fund.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/01_ml_fund.html#step-6---combine-k-means-and-umap",
    "title": "01 Machine Learning Fundamentals",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj <- k_means_mapped_tbl %>%\n  filter(centers == 10)\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl <- k_means_obj %>%\n  bind_cols(stock_date_matrix_tbl) %>%\n  mutate(.cluster = .$centers) %>%\n  select(symbol, .cluster) %>%\n  left_join(umap_results_tbl, by = \"symbol\") %>%\n  left_join(sp_500_index_tbl %>% select(symbol, company, sector), by = \"symbol\")\n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\numap_kmeans_results_tbl %>%\n  ggplot(aes(x = V1, y = V2, color = factor(.cluster))) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = palette_light() %>% rep(3))  # Adjust colors as desired\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/02_ml_sup.html",
    "href": "content/01_journal/02_ml_sup.html",
    "title": "02 Supervised ML",
    "section": "",
    "text": "1 Libraries\n\n# install packages\n# Standard\nlibrary(tidyverse)\n\n# Modeling\nlibrary(parsnip)\nlibrary(tidymodels)\nlibrary(rstanarm)\nlibrary(broom.mixed)\n\n\n# Preprocessing & Sampling\nlibrary(recipes)\nlibrary(rsample)\n\n# Modeling Error Metrics\nlibrary(yardstick)\n\n# Plotting Decision Trees\nlibrary(rpart.plot)\n\n\n2 Modeling\n\nbike_data_tbl <- readRDS(\"raw_data/bike_orderlines.rds\")\nbike_data_tbl\n\n\n\n  \n\n\nmodel_sales_tbl <- bike_data_tbl %>%\n  select(total_price, model, category_2, frame_material) %>%\n  \n  group_by(model, category_2, frame_material) %>%\n  summarise(total_sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  arrange(desc(total_sales))\n\n#> `summarise()` has grouped output by 'model', 'category_2'. You can override\n#> using the `.groups` argument.\n\nmodel_sales_tbl %>%\n  mutate(category_2 = as_factor(category_2) %>% \n           fct_reorder(total_sales, .fun = max) %>% \n           fct_rev()) %>%\n  \n  ggplot(aes(frame_material, total_sales)) +\n  geom_violin() +\n  geom_jitter(width = 0.1, alpha = 0.5, color = \"#2c3e50\") +\n  facet_wrap(~ category_2) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-6, suffix = \"M\", accuracy = 0.1)) +\n  tidyquant::theme_tq() +\n  labs(title = \"Total Sales for Each Model\",x = \"Frame Material\", y = \"Revenue\")\n\n#> Registered S3 method overwritten by 'quantmod':\n#>   method            from\n#>   as.zoo.data.frame zoo\n\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n\n\n#> Warning in max(data$density): no non-missing arguments to max; returning -Inf\n\n\n#> Warning: Computation failed in `stat_ydensity()`\n#> Caused by error in `$<-.data.frame`:\n#> ! replacement has 1 row, data has 0\n\n\n\n\n\n\n\nbike_features_tbl <- readRDS(\"raw_data/bike_features_tbl.rds\")\nbike_features_tbl <- bike_features_tbl %>% \n  select(frame_material:gender, `Rear Derailleur`, `Shift Lever`) %>% \n  mutate(`shimano dura-ace`        = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano dura-ace \") %>% as.numeric(),\n    `shimano ultegra`         = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano ultegra \") %>% as.numeric(),\n    `shimano 105`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano 105 \") %>% as.numeric(),\n    `shimano tiagra`          = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano tiagra \") %>% as.numeric(),\n    `Shimano sora`            = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano sora\") %>% as.numeric(),\n    `shimano deore`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore(?! xt)\") %>% as.numeric(),\n    `shimano slx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano slx\") %>% as.numeric(),\n    `shimano grx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano grx\") %>% as.numeric(),\n    `Shimano xt`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore xt |shimano xt \") %>% as.numeric(),\n    `Shimano xtr`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano xtr\") %>% as.numeric(),\n    `Shimano saint`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano saint\") %>% as.numeric(),\n    `SRAM red`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram red\") %>% as.numeric(),\n    `SRAM force`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram force\") %>% as.numeric(),\n    `SRAM rival`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram rival\") %>% as.numeric(),\n    `SRAM apex`               = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram apex\") %>% as.numeric(),\n    `SRAM xx1`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram xx1\") %>% as.numeric(),\n    `SRAM x01`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram x01|sram xo1\") %>% as.numeric(),\n    `SRAM gx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram gx\") %>% as.numeric(),\n    `SRAM nx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram nx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n    `Campagnolo potenza`      = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo potenza\") %>% as.numeric(),\n    `Campagnolo super record` = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo super record\") %>% as.numeric(),\n    `shimano nexus`           = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano nexus\") %>% as.numeric(),\n    `shimano alfine`          = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano alfine\") %>% as.numeric()\n  ) %>%  \n  select(-c(`Rear Derailleur`, `Shift Lever`)) %>% \n  mutate_if(is.numeric, ~replace(., is.na(.), 0)) \nbike_features_tbl <- bike_features_tbl %>% \n  mutate(id = row_number()) %>% \n  mutate(frame_material = factor(frame_material)) %>%\n  select(id, everything()) \nbike_features_tbl %>% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj <- rsample::initial_split(bike_features_tbl, prop   = 0.80, \n                                    strata = \"category_2\")\nsplit_obj %>% training() %>% distinct(category_2)\n\n\n\n  \n\n\nsplit_obj %>% testing() %>% distinct(category_2)\n\n\n\n  \n\n\ntrain_tbl <- training(split_obj)\ntest_tbl  <- testing(split_obj)\ntrain_data <- train_tbl %>% set_names(str_replace_all(names(train_tbl), \" |-\", \"_\"))\ntest_data  <- test_tbl  %>% set_names(str_replace_all(names(test_tbl), \" |-\", \"_\"))\n\n\n3 Recipe\n\nbike_recipe <- recipe(frame_material ~ ., data = train_data) %>% \n  step_dummy(all_nominal(), -all_outcomes()) %>% \n  step_zv(all_predictors()) \nd <- summary(bike_recipe)\nlr_mod <- logistic_reg() %>% \n  set_engine(\"glm\")\nlr_mod\n\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: glm\n\nbike_workflow <- workflow() %>% \n  add_model(lr_mod) %>% \n  add_recipe(bike_recipe)\nbike_workflow\n\n#> ══ Workflow ════════════════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: logistic_reg()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 2 Recipe Steps\n#> \n#> • step_dummy()\n#> • step_zv()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> Logistic Regression Model Specification (classification)\n#> \n#> Computational engine: glm\n\nbike_fit <- bike_workflow %>% \n  fit(data = train_data)\n\n#> Warning: glm.fit: algorithm did not converge\n\n\n#> Warning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\nbike_fit\n\n#> ══ Workflow [trained] ══════════════════════════════════════════════════════════\n#> Preprocessor: Recipe\n#> Model: logistic_reg()\n#> \n#> ── Preprocessor ────────────────────────────────────────────────────────────────\n#> 2 Recipe Steps\n#> \n#> • step_dummy()\n#> • step_zv()\n#> \n#> ── Model ───────────────────────────────────────────────────────────────────────\n#> \n#> Call:  stats::glm(formula = ..y ~ ., family = stats::binomial, data = data)\n#> \n#> Coefficients:\n#>                (Intercept)                          id  \n#>                 -4.739e+15                   1.298e+13  \n#>                     weight                       price  \n#>                 -7.638e+13                   3.363e+11  \n#>           shimano_dura_ace             shimano_ultegra  \n#>                  2.044e+15                   2.614e+15  \n#>                shimano_105              shimano_tiagra  \n#>                  2.673e+15                   6.132e+14  \n#>              shimano_deore                 shimano_slx  \n#>                 -8.855e+14                  -2.195e+15  \n#>                shimano_grx                  Shimano_xt  \n#>                  2.856e+15                   4.542e+14  \n#>              Shimano_saint                    SRAM_red  \n#>                  1.065e+16                   4.884e+14  \n#>                 SRAM_force                  SRAM_rival  \n#>                  5.153e+15                   5.942e+15  \n#>                  SRAM_apex                    SRAM_xx1  \n#>                 -9.822e+14                   1.439e+14  \n#>                   SRAM_x01                     SRAM_gx  \n#>                  1.825e+15                   1.706e+15  \n#>                    SRAM_nx                     SRAM_sx  \n#>                  7.009e+14                  -5.782e+14  \n#>    Campagnolo_super_record               shimano_nexus  \n#>                  2.004e+15                  -1.148e+15  \n#>             shimano_alfine           category_1_Gravel  \n#>                  1.635e+15                   3.093e+15  \n#>   category_1_Hybrid...City         category_1_Mountain  \n#>                 -1.998e+15                   2.023e+15  \n#>            category_1_Road         category_2_All.Road  \n#>                  3.617e+15                  -1.775e+15  \n#>            category_2_City    category_2_Cross.Country  \n#>                  1.104e+15                   2.905e+15  \n#>      category_2_Cyclocross        category_2_Dirt.Jump  \n#>                 -5.253e+14                  -1.158e+15  \n#>        category_2_Downhill           category_2_E.City  \n#>                 -5.470e+15                   7.065e+15  \n#>       category_2_E.Fitness         category_2_E.Gravel  \n#>                 -1.712e+15                   3.946e+15  \n#>      category_2_E.Mountain           category_2_E.Road  \n#>                  7.295e+15                  -2.634e+15  \n#>      category_2_E.Trekking        category_2_Endurance  \n#>                         NA                  -1.539e+15  \n#>          category_2_Enduro        category_2_Fat.Bikes  \n#>                  2.623e+14                   3.223e+15  \n#>            category_2_Race          category_2_Touring  \n#>                  2.432e+15                          NA  \n#> \n#> ...\n#> and 34 more lines.\n\nbike_fit %>% \n  pull_workflow_fit() %>% \n  tidy()\n\n#> Warning: `pull_workflow_fit()` was deprecated in workflows 0.2.3.\n#> ℹ Please use `extract_fit_parsnip()` instead.\n\n\n\n\n  \n\n\nbike_predict <- predict(bike_fit, test_data, type=\"prob\") %>% \n  bind_cols(test_data %>% select(frame_material, category_2)) \n\n#> Warning in predict.lm(object, newdata, se.fit, scale = 1, type = if (type == :\n#> prediction from rank-deficient fit; attr(*, \"non-estim\") has doubtful cases\n\nbike_predict %>% \n  roc_curve(truth = frame_material, .pred_aluminium) %>% \n  autoplot()\n\n\n\n\n\n\nbike_predict %>% \n  roc_curve(truth = frame_material, .pred_carbon) %>% \n  autoplot()\n\n\n\n\n\n\nbike_predict\n\n\n\n  \n\n\nroc_al <- bike_predict %>% \n  roc_auc(truth = frame_material, .pred_aluminium)\nroc_al\n\n\n\n  \n\n\nroc_car <- bike_predict %>% \n  roc_auc(truth = frame_material, .pred_carbon)\nroc_car\n\n\n\n  \n\n\n\n\n4 Evaluation\n\nmodel_01_linear_lm_simple <- linear_reg(mode = \"regression\") %>%\n  set_engine(\"lm\") %>%\n  fit(price ~ category_2 + frame_material, data = train_data)\nmodel_01_linear_lm_simple\n\n#> parsnip model object\n#> \n#> \n#> Call:\n#> stats::lm(formula = price ~ category_2 + frame_material, data = data)\n#> \n#> Coefficients:\n#>              (Intercept)        category_2All-Road            category_2City  \n#>                   2033.8                    -374.1                    -982.4  \n#>  category_2Cross-Country      category_2Cyclocross       category_2Dirt Jump  \n#>                    357.0                    -426.4                    -549.8  \n#>       category_2Downhill          category_2E-City       category_2E-Fitness  \n#>                   1633.4                    1015.1                    1008.5  \n#>       category_2E-Gravel      category_2E-Mountain          category_2E-Road  \n#>                   1596.7                    1283.3                     885.2  \n#>     category_2E-Trekking       category_2Endurance          category_2Enduro  \n#>                   1325.2                    -276.9                     906.1  \n#>      category_2Fat Bikes            category_2Race         category_2Touring  \n#>                  -1215.0                     930.8                    -767.3  \n#>          category_2Trail  category_2Triathlon Bike      frame_materialcarbon  \n#>                   -255.1                     666.4                    1565.2\n\ntest_data <- test_data %>% filter(category_2 != \"Fat Bikes\")\nyards <- model_01_linear_lm_simple %>%\n  predict(new_data = test_data) %>%\n  bind_cols(test_data %>% select(price)) %>%\n  yardstick::metrics(truth = price, estimate = .pred)\nyards\n\n\n\n  \n\n\ng1 <- bike_features_tbl %>% \n  mutate(category_2 = as.factor(category_2) %>% \n           fct_reorder(price)) %>% \n  \n  ggplot(aes(category_2, price)) +\n  geom_violin() +\n  geom_jitter(width = 0.2, alpha = 0.5, color = \"#2dc6d6\") +\n  coord_flip() +\n  facet_wrap(~ frame_material) +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  labs( title = \"Price for Each Model\", y = \"\", x = \"Category 2\")\ng1\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n\n\n\n\n\n\n\nnew_trail <- tibble(\n  model = \"Exceed AL SL new\",\n  category_2 = \"Trail\",\n  frame_material = \"aluminium\",\n  shimano_dura_ace = 0,\n  shimano_ultegra = 0,\n  shimano_105 = 0,\n  shimano_tiagra = 0,\n  Shimano_sora = 0,\n  shimano_deore = 0,\n  shimano_slx = 0,\n  shimano_grx = 0,\n  Shimano_xt = 1,\n  Shimano_xtr = 0,\n  Shimano_saint = 0,\n  SRAM_red = 0,\n  SRAM_force = 0,\n  SRAM_rival = 0,\n  SRAM_apex = 0,\n  SRAM_xx1 = 0,\n  SRAM_x01 = 0,\n  SRAM_gx = 0,\n  SRAM_nx = 0,\n  SRAM_sx = 0,\n  Campagnolo_potenza = 0,\n  Campagnolo_super_record = 0,\n  shimano_nexus = 0,\n  shimano_alfine = 0\n) \nnew_trail\n\n\n\n  \n\n\npredict(model_01_linear_lm_simple, new_data = new_trail)\n\n\n\n  \n\n\nmodels_tbl <- tibble(\n  model_id = str_c(\"Model 0\", 1:1),\n  model = list(\n    model_01_linear_lm_simple\n  )\n)\nmodels_tbl\n\n\n\n  \n\n\npredictions_new_trail <- models_tbl %>%\n  mutate(predictions = map(model, predict, new_data = new_trail)) %>%\n  unnest(predictions) %>%\n  mutate(category_2 = \"Trail\") %>%\n  left_join(new_trail, by = \"category_2\")\npredictions_new_trail\n\n\n\n  \n\n\ng2 <- g1 +\n  geom_point(aes(y = .pred), color = \"red\", alpha = 0.5,\n             data = predictions_new_trail) +\n  ggrepel::geom_text_repel(aes(label = model_id, y = .pred),\n                           size = 5,\n                           data = predictions_new_trail)\ng2\n\n#> Warning: Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped.\n#> Groups with fewer than two data points have been dropped."
  },
  {
    "objectID": "content/01_journal/03_ml_aut.html",
    "href": "content/01_journal/03_ml_aut.html",
    "title": "03 Automated Machine Learning with H20",
    "section": "",
    "text": "library(tidymodels)\nlibrary(tidyverse)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(stringr)\nemployee_attrition_tbl <- read.csv(\"raw_data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\ndept_job_role_tbl <- employee_attrition_tbl %>%\n  select(EmployeeNumber, Department, JobRole, PerformanceRating, Attrition)\ndept_job_role_tbl %>%\n  \n  group_by(Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  mutate(pct = n / sum(n))\n\n\n\n  \n\n\n\n\n1 Attrition by department\n\ndept_job_role_tbl %>%\n  \n  # Block 1\n  group_by(Department, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  # Block 2: Caution: It's easy to inadvertently miss grouping when creating counts & percents within groups\n  group_by(Department) %>%\n  mutate(pct = n / sum(n))\n\n\n\n  \n\n\n\n\n2 Attrition by job role\n\ndept_job_role_tbl %>%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  # Block 2\n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\")\n\n\n\n  \n\n\n\n\n3 Develop KPI\n\ndept_job_role_tbl %>%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  # Block 2\n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\") %>%\n  arrange(desc(pct)) %>%\n  mutate(\n    above_industry_avg = case_when(\n      pct > 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  )\n\n\n\n  \n\n\n\n\n4 Function to calculate attrition cost\n\ncalculate_attrition_cost <- function(\n  \n  # Employee\n  n                    = 1,\n  salary               = 80000,\n  \n  # Direct Costs\n  separation_cost      = 500,\n  vacancy_cost         = 10000,\n  acquisition_cost     = 4900,\n  placement_cost       = 3500,\n  \n  # Productivity Costs\n  net_revenue_per_employee = 250000,\n  workdays_per_year        = 240,\n  workdays_position_open   = 40,\n  workdays_onboarding      = 60,\n  onboarding_efficiency    = 0.50\n  \n) {\n  \n  # Direct Costs\n  direct_cost <- sum(separation_cost, vacancy_cost, acquisition_cost, placement_cost)\n  \n  # Lost Productivity Costs\n  productivity_cost <- net_revenue_per_employee / workdays_per_year *\n    (workdays_position_open + workdays_onboarding * onboarding_efficiency)\n  \n  # Savings of Salary & Benefits (Cost Reduction)\n  salary_benefit_reduction <- salary / workdays_per_year * workdays_position_open\n  \n  # Estimated Turnover Per Employee\n  cost_per_employee <- direct_cost + productivity_cost - salary_benefit_reduction\n  \n  # Total Cost of Employee Turnover\n  total_cost <- n * cost_per_employee\n  \n  return(total_cost)\n  \n}\ncalculate_attrition_cost()\n\n#> [1] 78483.33\n\ncalculate_attrition_cost(200)\n\n#> [1] 15696667\n\n\n\n5 Function creation\n\ndept_job_role_tbl %>%\n  \n  # Block 1\n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  # Block 2\n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n  \n  # Block 3\n  filter(Attrition %in% \"Yes\") %>%\n  arrange(desc(pct)) %>%\n  mutate(\n    above_industry_avg = case_when(\n      pct > 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %>%\n  \n  # Block 4. Set salaray to 80000 for now\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n\n\n  \n\n\n\n\n6 Function to convert counts to percentages.\n\ndept_job_role_tbl %>%\n  count(Department, JobRole, Attrition)\n\n\n\n  \n\n\ncount_to_pct <- function(data, ..., col = n) {\n  # capture the dots\n  grouping_vars_expr <- quos(...)\n  col_expr <- enquo(col)\n  ret <- data %>%\n    group_by(!!! grouping_vars_expr) %>%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %>%\n    ungroup()\n  return(ret)\n}\ndept_job_role_tbl %>%\n  count(JobRole, Attrition) %>%\n  count_to_pct(JobRole)\n\n\n\n  \n\n\ndept_job_role_tbl %>%\n  count(Department, JobRole, Attrition) %>%\n  count_to_pct(Department, JobRole) \n\n\n\n  \n\n\n\n\ndept_job_role_tbl %>%\n  \n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  \n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n  \n  filter(Attrition %in% \"Yes\") %>%\n  arrange(desc(pct)) %>%\n  mutate(\n    above_industry_avg = case_when(\n      pct > 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  ) %>%\n  \n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  )\n\n\n\n  \n\n\n\n\nassess_attrition <- function(data, attrition_col, attrition_value, baseline_pct) {\n  \n  attrition_col_expr <- enquo(attrition_col)\n  \n  data %>%\n    \n    # Use parenthesis () to give tidy eval evaluation priority\n    filter((!! attrition_col_expr) %in% attrition_value) %>%\n    arrange(desc(pct)) %>%\n    mutate(\n      # Function inputs in numeric format (e.g. baseline_pct = 0.088 don't require tidy eval)\n      above_industry_avg = case_when(\n        pct > baseline_pct ~ \"Yes\",\n        TRUE ~ \"No\"\n      )\n    )\n  \n}\n\n\n7 Visualization\n\ndept_job_role_tbl %>%\n  \n  count(Department, JobRole, Attrition) %>%\n  count_to_pct(Department, JobRole) %>%\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %>%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %>%\n  \n  # Data Manipulation\n  mutate(name = str_c(Department, JobRole, sep = \": \") %>% as_factor()) %>%\n  \n  # Check levels\n  # pull(name) %>%\n  # levels()\n  \n  mutate(name      = fct_reorder(name, cost_of_attrition)) %>%\n  mutate(cost_text = str_c(\"$\", format(cost_of_attrition / 1e6, digits = 2),\n                           \"M\", sep = \"\")) %>%\n  \n  #Plotting\n  ggplot(aes(cost_of_attrition, y = name)) +\n  geom_segment(aes(xend = 0, yend = name),    color = \"#2dc6d6\") +\n  geom_point(  aes(size = cost_of_attrition), color = \"#2dc6d6\") +\n  scale_x_continuous(labels = scales::dollar) +\n  geom_label(aes(label = cost_text, size = cost_of_attrition),\n             hjust = \"inward\", color = \"#2dc6d6\") +\n  scale_size(range = c(3, 5)) +\n  labs(title = \"Estimated cost of Attrition: By Dept and Job Role\",\n       y = \"\",\n       x = \"Cost of attrition\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n# Descriptive Features\nemployee_attrition_tbl %>% select(Age, DistanceFromHome, Gender, MaritalStatus, NumCompaniesWorked, Over18)\n\n\n\n  \n\n\n\n\n# Employment Features\nemployee_attrition_tbl %>% select(Department, EmployeeCount, EmployeeNumber, JobInvolvement, JobLevel, JobRole, JobSatisfaction)\n\n\n\n  \n\n\n\n\n# Compensation Features\nemployee_attrition_tbl %>% select(DailyRate, HourlyRate, MonthlyIncome, MonthlyRate, PercentSalaryHike, StockOptionLevel)\n\n\n\n  \n\n\n\n\n# Survery Results\nemployee_attrition_tbl %>% select(EnvironmentSatisfaction, JobSatisfaction, RelationshipSatisfaction, WorkLifeBalance)\n\n\n\n  \n\n\n\n\n# Performance Data\nemployee_attrition_tbl %>% select(JobInvolvement, PerformanceRating)\n\n\n\n  \n\n\n\n\n# Work-Life Features\nemployee_attrition_tbl %>% select(BusinessTravel, OverTime)\n\n\n\n  \n\n\n\n\n# Training & Education\nemployee_attrition_tbl %>% select(Education, EducationField, TrainingTimesLastYear)\n\n\n\n  \n\n\n\n\n# Time-Based Features\nemployee_attrition_tbl %>% select(TotalWorkingYears, YearsAtCompany, YearsInCurrentRole, YearsSinceLastPromotion, YearsWithCurrManager)\n\n\n\n  \n\n\n\n\nlibrary(GGally)\n# Step 2: Data Visualization ----\nemployee_attrition_tbl %>%\n  select(Attrition,  Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n  ggpairs()\n\n\n\n\n\n\n\n\n# Explore Features by Category\nplot_ggpairs <- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr <- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g <- data %>%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name <- quo_name(color_expr)\n    \n    g <- data %>%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  return(g)\n  \n}\n\n\n8 Challanges\nDescriptive features: age, gender, marital status\n\nemployee_attrition_tbl %>%\n  select(Attrition, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nEmployment features: department, job role, job level\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"employee\"), contains(\"department\"), contains(\"job\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nCompensation features: HourlyRate, MonthlyIncome, StockOptionLevel\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nSurvey Results: Satisfaction level, Work Life Balance\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nPerformance Data: Job Involvement, Performance Rating\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"performance\"), contains(\"involvement\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nWork-Life Features\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"overtime\"), contains(\"travel\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nTraining and Education\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"training\"), contains(\"education\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nTime-Based Features: Years at company, years in current role\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"years\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\nCompensation Features\n\nWhat can you deduce about the interaction between Monthly Income and Attrition?\n\nThose that are leaving have a lower Monthly Income\n\n\nCompensation Features\n\nWhat can you deduce about the interaction between Percent Salary Hike and Attrition?\n\nIt’s difficult to deduce anything based on the visualization\n\n\nCompensation Features\n\nWhat can you deduce about the interaction between Stock Option Level and Attrition?\n\nThose that are staying have a higher stock option level\n\n\nSurvey Results\n\nWhat can you deduce about the interaction between Environment Satisfaction and Attrition?\n\nA higher proportion of those leaving have a low environment satisfaction level\n\n\nSurvey Results\n\nWhat can you deduce about the interaction between Work Life Balance and Attrition\n\nThose that are staying have a higher density of 2’s and 3’s\n\n\nPerformance Data\n\nWhat Can you deduce about the interaction between Job Involvement and Attrition?\nIt’s difficult to deduce anything based on the visualization\n\nWork-Life Features\n\nWhat can you deduce about the interaction between Over Time and Attrition?\n\nThe proportion of those leaving that are working Over Time are high compared to those that are not leaving\n\n\nTraining and Education\n\nWhat can you deduce about the interaction between Training Times Last Year and Attrition\n\nPeople that leave tend to have less annual trainings\n\n\nTime-Based Features\n\nWhat can you deduce about the interaction between Years At Company and Attrition\n\nPeople that leave tend to have less working years at the company\n\n\nTime-Based Features\n\nWhat can you deduce about the interaction between Years Since Last Promotion and Attrition?\n\nIt’s difficult to deduce anything based on the visualization"
  },
  {
    "objectID": "content/01_journal/04_perf_meas.html",
    "href": "content/01_journal/04_perf_meas.html",
    "title": "04 Performance Measures",
    "section": "",
    "text": "library(tidymodels)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(rstanarm)\nlibrary(broom.mixed)\nlibrary(h2o)\nproduct_backorders_tbl <- read.csv(\"raw_data/product_backorders.csv\")\nproduct_backorders_tbl %>% glimpse()\n\n#> Rows: 19,053\n#> Columns: 23\n#> $ sku               <int> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#> $ national_inv      <int> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#> $ lead_time         <int> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#> $ in_transit_qty    <int> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#> $ forecast_3_month  <int> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#> $ forecast_6_month  <int> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#> $ forecast_9_month  <int> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#> $ sales_1_month     <int> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#> $ sales_3_month     <int> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#> $ sales_6_month     <int> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#> $ sales_9_month     <int> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#> $ min_bank          <int> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#> $ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ pieces_past_due   <int> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#> $ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#> $ local_bo_qty      <int> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#> $ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#> $ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\n\n\ndata_split <- initial_split(product_backorders_tbl, prop = 3/4)\n# Assign training and test data\ntrain_data <- training(data_split)\ntest_data  <- testing(data_split)\n# Specifying of the response and the predictor variables\nfactor_names <- c(\"went_on_backorder\")\nproduct_rec <- \n  recipe(went_on_backorder ~ ., data = train_data) %>%  \n  step_dummy(all_nominal(), -all_outcomes()) %>% \n  step_zv(all_predictors()) %>% \n  step_mutate_at(factor_names, fn = as.factor) %>%\n  prep()\nd <- summary(product_rec)\ntrain_tbl <- bake(product_rec, new_data = train_data)\ntest_tbl  <- bake(product_rec, new_data = test_data)\n\n\nh2o.init()\n\n#> \n#> H2O is not running yet, starting it now...\n#> \n#> Note:  In case of errors look at the following log files:\n#>     C:\\Users\\ghazi\\AppData\\Local\\Temp\\RtmpYpVkN5\\file21104b94b7c/h2o_ghazi_started_from_r.out\n#>     C:\\Users\\ghazi\\AppData\\Local\\Temp\\RtmpYpVkN5\\file211042105e2b/h2o_ghazi_started_from_r.err\n#> \n#> \n#> Starting H2O JVM and connecting:  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         1 seconds 801 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 18 days \n#>     H2O cluster name:           H2O_started_from_R_ghazi_ikd784 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.85 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\n# Splitting the data for validation df\nsplit_h2o <- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.75), seed = 1234)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o <- split_h2o[[1]]\nvalid_h2o <- split_h2o[[2]]\ntest_h2o  <- as.h2o(test_tbl)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n# Predictors\ny <- \"went_on_backorder\"\nx <- setdiff(names(train_h2o), y)\n\n\n# AutoML Model\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         4 seconds 45 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 18 days \n#>     H2O cluster name:           H2O_started_from_R_ghazi_ikd784 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.82 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\nh2o_models_automl <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 120,\n  nfolds            = 5 \n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n#> 15:30:21.840: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 15:30:21.856: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |  11%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  22%\n  |                                                                            \n  |================                                                      |  23%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |======================================                                |  55%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |=================================================                     |  71%\n  |                                                                            \n  |==========================================================            |  82%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |====================================================================  |  98%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(h2o_models_automl)\n\n#> [1] \"S4\"\n\nslotNames(h2o_models_automl)\n\n#> [1] \"project_name\"   \"leader\"         \"leaderboard\"    \"event_log\"     \n#> [5] \"modeling_steps\" \"training_info\"\n\nh2o_models_automl@leaderboard \n\n#>                                                  model_id       auc   logloss\n#> 1    StackedEnsemble_AllModels_3_AutoML_1_20230615_153021 0.9483135 0.1834619\n#> 2    StackedEnsemble_AllModels_2_AutoML_1_20230615_153021 0.9475456 0.1817784\n#> 3    StackedEnsemble_AllModels_1_AutoML_1_20230615_153021 0.9467287 0.1829565\n#> 4 StackedEnsemble_BestOfFamily_4_AutoML_1_20230615_153021 0.9454371 0.1860180\n#> 5 StackedEnsemble_BestOfFamily_3_AutoML_1_20230615_153021 0.9452337 0.1858350\n#> 6             GBM_grid_1_AutoML_1_20230615_153021_model_8 0.9442565 0.1904075\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7545199            0.1312488 0.2333837 0.05446795\n#> 2 0.7499700            0.1399207 0.2334388 0.05449368\n#> 3 0.7477844            0.1374424 0.2344023 0.05494443\n#> 4 0.7406394            0.1807661 0.2363660 0.05586891\n#> 5 0.7430344            0.1506124 0.2356456 0.05552886\n#> 6 0.7348939            0.1700744 0.2400471 0.05762262\n#> \n#> [39 rows x 7 columns]\n\n#h2o_models_automl@leader\n\n\n#h2o.getModel(\"StackedEnsemble_AllModels_3_AutoML_1_20230612_154953\") %>% \n#h2o.saveModel(path = \"h20_models/StackedEnsemble_AllModels_3_AutoML_1_20230612_154953\")\nh2o.loadModel(\"h20_models/StackedEnsemble_AllModels_3_AutoML_1_20230612_154953 - Copy\")\n\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_3_AutoML_1_20230612_154953 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)            13/27\n#> 3           # GBM base models (used / total)            11/20\n#> 4           # DRF base models (used / total)              2/2\n#> 5           # GLM base models (used / total)              0/1\n#> 6  # DeepLearning base models (used / total)              0/4\n#> 7                      Metalearner algorithm              GLM\n#> 8         Metalearner fold assignment scheme           Random\n#> 9                         Metalearner nfolds                5\n#> 10                   Metalearner fold_column               NA\n#> 11        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.02255614\n#> RMSE:  0.150187\n#> LogLoss:  0.08969515\n#> Mean Per-Class Error:  0.05948546\n#> AUC:  0.9933753\n#> AUCPR:  0.9618789\n#> Gini:  0.9867507\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error       Rate\n#> No     8576  137 0.015724  =137/8713\n#> Yes     124 1077 0.103247  =124/1201\n#> Totals 8700 1214 0.026326  =261/9914\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.416248    0.891925 174\n#> 2                       max f2  0.292381    0.908435 211\n#> 3                 max f0point5  0.589412    0.921129 130\n#> 4                 max accuracy  0.433329    0.973774 169\n#> 5                max precision  0.986872    1.000000   0\n#> 6                   max recall  0.044874    1.000000 322\n#> 7              max specificity  0.986872    1.000000   0\n#> 8             max absolute_mcc  0.416248    0.876954 174\n#> 9   max min_per_class_accuracy  0.249537    0.956703 225\n#> 10 max mean_per_class_accuracy  0.225565    0.957954 234\n#> 11                     max tns  0.986872 8713.000000   0\n#> 12                     max fns  0.986872 1200.000000   0\n#> 13                     max fps  0.001113 8713.000000 399\n#> 14                     max tps  0.044874 1201.000000 322\n#> 15                     max tnr  0.986872    1.000000   0\n#> 16                     max fnr  0.986872    0.999167   0\n#> 17                     max fpr  0.001113    1.000000 399\n#> 18                     max tpr  0.044874    1.000000 322\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.04625224\n#> RMSE:  0.2150633\n#> LogLoss:  0.1565848\n#> Mean Per-Class Error:  0.1720281\n#> AUC:  0.9567071\n#> AUCPR:  0.785403\n#> Gini:  0.9134142\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     3034 105 0.033450  =105/3139\n#> Yes     123 273 0.310606   =123/396\n#> Totals 3157 378 0.064498  =228/3535\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.405450    0.705426 164\n#> 2                       max f2  0.102323    0.773682 274\n#> 3                 max f0point5  0.582094    0.749309 112\n#> 4                 max accuracy  0.524990    0.938331 131\n#> 5                max precision  0.979958    1.000000   0\n#> 6                   max recall  0.002936    1.000000 394\n#> 7              max specificity  0.979958    1.000000   0\n#> 8             max absolute_mcc  0.405450    0.669463 164\n#> 9   max min_per_class_accuracy  0.132088    0.888889 262\n#> 10 max mean_per_class_accuracy  0.095899    0.894141 278\n#> 11                     max tns  0.979958 3139.000000   0\n#> 12                     max fns  0.979958  395.000000   0\n#> 13                     max fps  0.001191 3139.000000 399\n#> 14                     max tps  0.002936  396.000000 394\n#> 15                     max tnr  0.979958    1.000000   0\n#> 16                     max fnr  0.979958    0.997475   0\n#> 17                     max fpr  0.001191    1.000000 399\n#> 18                     max tpr  0.002936    1.000000 394\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.05191287\n#> RMSE:  0.227844\n#> LogLoss:  0.1732888\n#> Mean Per-Class Error:  0.1399649\n#> AUC:  0.9513112\n#> AUCPR:  0.7409948\n#> Gini:  0.9026224\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     8882  567 0.060006   =567/9449\n#> Yes     287 1018 0.219923   =287/1305\n#> Totals 9169 1585 0.079412  =854/10754\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.284276    0.704498 221\n#> 2                       max f2  0.121407    0.782971 287\n#> 3                 max f0point5  0.620662    0.728929 120\n#> 4                 max accuracy  0.580429    0.928771 133\n#> 5                max precision  0.864391    0.894410  40\n#> 6                   max recall  0.002355    1.000000 394\n#> 7              max specificity  0.978475    0.999788   0\n#> 8             max absolute_mcc  0.284276    0.663281 221\n#> 9   max min_per_class_accuracy  0.123042    0.888123 286\n#> 10 max mean_per_class_accuracy  0.098707    0.891621 299\n#> 11                     max tns  0.978475 9447.000000   0\n#> 12                     max fns  0.978475 1302.000000   0\n#> 13                     max fps  0.000121 9449.000000 399\n#> 14                     max tps  0.002355 1305.000000 394\n#> 15                     max tnr  0.978475    0.999788   0\n#> 16                     max fnr  0.978475    0.997701   0\n#> 17                     max fpr  0.000121    1.000000 399\n#> 18                     max tpr  0.002355    1.000000 394\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.924483  0.007181   0.923148   0.912761   0.927767   0.927299\n#> auc         0.951607  0.006110   0.957541   0.949740   0.958556   0.947005\n#> err         0.075517  0.007181   0.076852   0.087239   0.072233   0.072701\n#> err_count 162.400000 15.693948 167.000000 188.000000 154.000000 151.000000\n#> f0point5    0.684003  0.025006   0.678934   0.648204   0.677083   0.709356\n#>           cv_5_valid\n#> accuracy    0.931439\n#> auc         0.945191\n#> err         0.068561\n#> err_count 152.000000\n#> f0point5    0.706436\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.667772  0.039364   0.654434   0.620991   0.645963\n#> r2                  0.513959  0.026121   0.512787   0.473463   0.542733\n#> recall              0.766482  0.059950   0.798507   0.785978   0.838710\n#> residual_deviance 744.738900 50.175915 744.186200 810.688100 673.246000\n#> rmse                0.227615  0.008674   0.229517   0.240598   0.216802\n#> specificity         0.946314  0.013292   0.940682   0.930998   0.939490\n#>                   cv_4_valid cv_5_valid\n#> precision           0.708812   0.708661\n#> r2                  0.529809   0.511005\n#> recall              0.711538   0.697674\n#> residual_deviance 730.595950 764.978000\n#> rmse                0.226916   0.224240\n#> specificity         0.958173   0.962226\n\n extract_h2o_model_name_by_position <- function(h2o_leaderboard, n = 1, verbose = T) {\n   \n   model_name <- h2o_leaderboard %>%\n     as_tibble() %>%\n     slice(n) %>%\n     pull(model_id)\n   \n   if (verbose) message(model_name)\n   \n   return(model_name)\n   \n }\n\n\n#h2o_models_automl@leaderboard %>% \n#  extract_h2o_model_name_by_position(6) %>% \n#h2o.getModel() %>% \n#  h2o.saveModel(path = \"h20_models/\")\nstacked_ensemble_h2o <- h2o.loadModel(\"h20_models/StackedEnsemble_AllModels_3_AutoML_1_20230612_154953 - Copy\")\nstacked_ensemble_h2o\n\n#> Model Details:\n#> ==============\n#> \n#> H2OBinomialModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_3_AutoML_1_20230612_154953 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)            13/27\n#> 3           # GBM base models (used / total)            11/20\n#> 4           # DRF base models (used / total)              2/2\n#> 5           # GLM base models (used / total)              0/1\n#> 6  # DeepLearning base models (used / total)              0/4\n#> 7                      Metalearner algorithm              GLM\n#> 8         Metalearner fold assignment scheme           Random\n#> 9                         Metalearner nfolds                5\n#> 10                   Metalearner fold_column               NA\n#> 11        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.02255614\n#> RMSE:  0.150187\n#> LogLoss:  0.08969515\n#> Mean Per-Class Error:  0.05948546\n#> AUC:  0.9933753\n#> AUCPR:  0.9618789\n#> Gini:  0.9867507\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error       Rate\n#> No     8576  137 0.015724  =137/8713\n#> Yes     124 1077 0.103247  =124/1201\n#> Totals 8700 1214 0.026326  =261/9914\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.416248    0.891925 174\n#> 2                       max f2  0.292381    0.908435 211\n#> 3                 max f0point5  0.589412    0.921129 130\n#> 4                 max accuracy  0.433329    0.973774 169\n#> 5                max precision  0.986872    1.000000   0\n#> 6                   max recall  0.044874    1.000000 322\n#> 7              max specificity  0.986872    1.000000   0\n#> 8             max absolute_mcc  0.416248    0.876954 174\n#> 9   max min_per_class_accuracy  0.249537    0.956703 225\n#> 10 max mean_per_class_accuracy  0.225565    0.957954 234\n#> 11                     max tns  0.986872 8713.000000   0\n#> 12                     max fns  0.986872 1200.000000   0\n#> 13                     max fps  0.001113 8713.000000 399\n#> 14                     max tps  0.044874 1201.000000 322\n#> 15                     max tnr  0.986872    1.000000   0\n#> 16                     max fnr  0.986872    0.999167   0\n#> 17                     max fpr  0.001113    1.000000 399\n#> 18                     max tpr  0.044874    1.000000 322\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.04625224\n#> RMSE:  0.2150633\n#> LogLoss:  0.1565848\n#> Mean Per-Class Error:  0.1720281\n#> AUC:  0.9567071\n#> AUCPR:  0.785403\n#> Gini:  0.9134142\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No Yes    Error       Rate\n#> No     3034 105 0.033450  =105/3139\n#> Yes     123 273 0.310606   =123/396\n#> Totals 3157 378 0.064498  =228/3535\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.405450    0.705426 164\n#> 2                       max f2  0.102323    0.773682 274\n#> 3                 max f0point5  0.582094    0.749309 112\n#> 4                 max accuracy  0.524990    0.938331 131\n#> 5                max precision  0.979958    1.000000   0\n#> 6                   max recall  0.002936    1.000000 394\n#> 7              max specificity  0.979958    1.000000   0\n#> 8             max absolute_mcc  0.405450    0.669463 164\n#> 9   max min_per_class_accuracy  0.132088    0.888889 262\n#> 10 max mean_per_class_accuracy  0.095899    0.894141 278\n#> 11                     max tns  0.979958 3139.000000   0\n#> 12                     max fns  0.979958  395.000000   0\n#> 13                     max fps  0.001191 3139.000000 399\n#> 14                     max tps  0.002936  396.000000 394\n#> 15                     max tnr  0.979958    1.000000   0\n#> 16                     max fnr  0.979958    0.997475   0\n#> 17                     max fpr  0.001191    1.000000 399\n#> 18                     max tpr  0.002936    1.000000 394\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> H2OBinomialMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.05191287\n#> RMSE:  0.227844\n#> LogLoss:  0.1732888\n#> Mean Per-Class Error:  0.1399649\n#> AUC:  0.9513112\n#> AUCPR:  0.7409948\n#> Gini:  0.9026224\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>          No  Yes    Error        Rate\n#> No     8882  567 0.060006   =567/9449\n#> Yes     287 1018 0.219923   =287/1305\n#> Totals 9169 1585 0.079412  =854/10754\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.284276    0.704498 221\n#> 2                       max f2  0.121407    0.782971 287\n#> 3                 max f0point5  0.620662    0.728929 120\n#> 4                 max accuracy  0.580429    0.928771 133\n#> 5                max precision  0.864391    0.894410  40\n#> 6                   max recall  0.002355    1.000000 394\n#> 7              max specificity  0.978475    0.999788   0\n#> 8             max absolute_mcc  0.284276    0.663281 221\n#> 9   max min_per_class_accuracy  0.123042    0.888123 286\n#> 10 max mean_per_class_accuracy  0.098707    0.891621 299\n#> 11                     max tns  0.978475 9447.000000   0\n#> 12                     max fns  0.978475 1302.000000   0\n#> 13                     max fps  0.000121 9449.000000 399\n#> 14                     max tps  0.002355 1305.000000 394\n#> 15                     max tnr  0.978475    0.999788   0\n#> 16                     max fnr  0.978475    0.997701   0\n#> 17                     max fpr  0.000121    1.000000 399\n#> 18                     max tpr  0.002355    1.000000 394\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n#> Cross-Validation Metrics Summary: \n#>                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#> accuracy    0.924483  0.007181   0.923148   0.912761   0.927767   0.927299\n#> auc         0.951607  0.006110   0.957541   0.949740   0.958556   0.947005\n#> err         0.075517  0.007181   0.076852   0.087239   0.072233   0.072701\n#> err_count 162.400000 15.693948 167.000000 188.000000 154.000000 151.000000\n#> f0point5    0.684003  0.025006   0.678934   0.648204   0.677083   0.709356\n#>           cv_5_valid\n#> accuracy    0.931439\n#> auc         0.945191\n#> err         0.068561\n#> err_count 152.000000\n#> f0point5    0.706436\n#> \n#> ---\n#>                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> precision           0.667772  0.039364   0.654434   0.620991   0.645963\n#> r2                  0.513959  0.026121   0.512787   0.473463   0.542733\n#> recall              0.766482  0.059950   0.798507   0.785978   0.838710\n#> residual_deviance 744.738900 50.175915 744.186200 810.688100 673.246000\n#> rmse                0.227615  0.008674   0.229517   0.240598   0.216802\n#> specificity         0.946314  0.013292   0.940682   0.930998   0.939490\n#>                   cv_4_valid cv_5_valid\n#> precision           0.708812   0.708661\n#> r2                  0.529809   0.511005\n#> recall              0.711538   0.697674\n#> residual_deviance 730.595950 764.978000\n#> rmse                0.226916   0.224240\n#> specificity         0.958173   0.962226\n\npredictions <- h2o.predict(stacked_ensemble_h2o, newdata = as.h2o(test_tbl))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(predictions)\n\n#> [1] \"environment\"\n\npredictions_tbl <- predictions %>% as_tibble()\npredictions_tbl"
  },
  {
    "objectID": "content/01_journal/06_dl.html",
    "href": "content/01_journal/06_dl.html",
    "title": "06 Deep Learning",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .Rmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/01_journal/06_dl.html#second-level-header",
    "href": "content/01_journal/06_dl.html#second-level-header",
    "title": "06 Deep Learning",
    "section": "\n1.1 Second level header",
    "text": "1.1 Second level header\nYou can add more headers by adding more hashtags. These won’t be put into the table of contents\nthird level header\nHere’s an even lower level header"
  },
  {
    "objectID": "content/01_journal/05_lime.html",
    "href": "content/01_journal/05_lime.html",
    "title": "05 LIME",
    "section": "",
    "text": "# LIME FEATURE EXPLANATION ----\n\n# 1. Setup ----\n\n# Load Libraries \nlibrary(tidymodels)\nlibrary(magrittr)\nlibrary(dplyr)\nlibrary(sjmisc)\nlibrary(magrittr)\nlibrary(haven)\nlibrary(sjlabelled)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(rstanarm)\nlibrary(broom.mixed)\nlibrary(h2o)\nlibrary(readxl)\nlibrary(tidyverse)\nlibrary(tidyquant)\nlibrary(lime)\n\n\n# Load Data\nemployee_attrition_tbl <- read_csv(\"raw_data/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.csv\")\n\n#> Rows: 1470 Columns: 35\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#> dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndefinitions_raw_tbl    <- read_excel(\"raw_data/data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\n#> New names:\n#> • `` -> `...1`\n#> • `` -> `...2`\n\n# Processing Pipeline\nsource(\"00_Scripts/data_processing_pipeline.R\")\n\nemployee_attrition_readable_tbl <- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\n#> Joining with `by = join_by(Education)`\n#> Joining with `by = join_by(EnvironmentSatisfaction)`\n#> Joining with `by = join_by(JobInvolvement)`\n#> Joining with `by = join_by(JobSatisfaction)`\n#> Joining with `by = join_by(PerformanceRating)`\n#> Joining with `by = join_by(RelationshipSatisfaction)`\n#> Joining with `by = join_by(WorkLifeBalance)`\n\n# Split into test and train\nset.seed(seed = 1113)\nsplit_obj <- rsample::initial_split(employee_attrition_readable_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_readable_tbl <- training(split_obj)\ntest_readable_tbl  <- testing(split_obj)\n\n# ML Preprocessing Recipe \nrecipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%\n  step_zv(all_predictors()) %>%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %>% \n  prep()\n\nrecipe_obj\n\n#> \n#> ── Recipe ──────────────────────────────────────────────────────────────────────\n#> \n#> ── Inputs \n#> Number of variables by role\n#> outcome:    1\n#> predictor: 34\n#> \n#> ── Training information \n#> Training data contained 1249 data points and no incomplete rows.\n#> \n#> ── Operations \n#> • Zero variance filter removed: EmployeeCount, Over18, StandardHours | Trained\n#> • Variable mutation for: JobLevel, StockOptionLevel | Trained\n\ntrain_tbl <- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)\n\n\n# 2. Models ----\n\nh2o.init()\n\n#> \n#> H2O is not running yet, starting it now...\n#> \n#> Note:  In case of errors look at the following log files:\n#>     C:\\Users\\ghazi\\AppData\\Local\\Temp\\RtmpsvGmks\\file44a86ef67347/h2o_ghazi_started_from_r.out\n#>     C:\\Users\\ghazi\\AppData\\Local\\Temp\\RtmpsvGmks\\file44a865c435ec/h2o_ghazi_started_from_r.err\n#> \n#> \n#> Starting H2O JVM and connecting:  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         1 seconds 604 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.4 \n#>     H2O cluster version age:    1 month and 18 days \n#>     H2O cluster name:           H2O_started_from_R_ghazi_drs368 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   3.85 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\n#h2o.getModel(\"metalearner_AUTO_StackedEnsemble_AllModels_1_AutoML_9_20220524_185544\") %>% \n#  h2o.saveModel(path = \"h20_models/\")\n\n#automl_leader <- h2o.loadModel(\"h20_models/StackedEnsemble_BestOfFamily_1_AutoML\")\n\n#automl_leader <- h2o.loadModel(\"h20_models/StackedEnsemble_AllModels_3_AutoML_1_20230612_154953 - Copy\")\n\n\n# 3. LIME ----\n\n# 3.1 Making Predictions ----\n\n# predictions_tbl <- automl_leader %>% \n#     h2o.predict(newdata = as.h2o(test_tbl)) %>%\n#     as.tibble() %>%\n#     bind_cols(\n#         test_tbl %>%\n#             select(EducationField)\n#     )\n# \n# predictions_tbl\n# test_tbl %>%\n#   slice(1) %>%\n#   glimpse()\n# \n## 3.2 Single Explanation ----\n# \n# explainer <- train_tbl %>%\n#   select(-Attrition) %>%\n#   lime(\n#     model           = automl_leader,\n#     bin_continuous  = TRUE,\n#     n_bins          = 4,\n#     quantile_bins   = TRUE\n#   )\n# \n# explainer\n# \n# ?lime::explain\n# \n# explanation <- test_tbl %>%\n#   slice(1) %>%\n#   select(-Attrition) %>%\n#   lime::explain(\n#     \n#     # Pass our explainer object\n#     explainer = explainer,\n#     # Because it is a binary classification model: 1\n#     n_labels   = 1,\n#     # number of features to be returned\n#     n_features = 8,\n#     # number of localized linear models\n#     n_permutations = 5000,\n#     # Let's start with 1\n#     kernel_width   = 1\n#   )\n# \n## explanation\n# \n# explanation %>%\n#   as.tibble() %>%\n#   select(feature:prediction) \n# \n# g <- plot_features(explanation = explanation, ncol = 1)\n# \n# plot_features(explanation = explanation, ncol = 1)\n# \n# # 3.3 Multiple Explanations ----\n# \n# explanation <- test_tbl %>%\n#   slice(1:20) %>%\n#   select(-Attrition) %>%\n#   lime::explain(\n#     explainer = explainer,\n#     n_labels   = 1,\n#     n_features = 8,\n#     n_permutations = 5000,\n#     kernel_width   = 0.5\n#   )\n# \n# explanation %>%\n#   as.tibble()\n# \n# plot_features(explanation, ncol = 4)\n# \n# plot_explanations(explanation)\n# # Challenge part 1 ----\n# explanation %>% \n#   as.tibble()\n# \n# case_1 <- explanation %>%\n#   filter(case == 1)\n# \n# case_1 %>%\n#   plot_features()\n# \n# case_1 %>%\n#   ggplot(aes(feature_weight, feature)) +\n#   geom_col(fill = \"#1a2c50\") +\n#   geom_smooth(method = \"lm\", se = FALSE) +\n#   scale_fill_manual(values = c(\"steelblue\", \"firebrick\"), drop = FALSE) +\n#   labs(\n#     title = (\"Model explanation\"),\n#     x = \"Weight\",\n#     y = \"Feature\"\n#   ) +\n#   theme_tq_dark()\n# \n# # Challenge part 2 ----\n# explanation %>% ggplot(aes_(~case, ~feature_desc)) +\n#   geom_tile(aes_(fill = ~feature_weight)) + \n#   scale_x_discrete(\"Case\", expand = c(0, 0)) +\n#   scale_y_discrete(\"Feature\", expand = c(0, 0)) +\n#   scale_fill_gradient2(\"Feature\\nweight\", low = \"firebrick\", mid = \"#f7f7f7\", high = \"steelblue\") +\n#   theme(panel.border = element_rect(fill = NA,\n#                                     colour = \"grey60\",\n#                                     size = 1),\n#         panel.grid = element_blank(),\n#         legend.position = \"right\",\n#         axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) +\n#   facet_wrap(~label)"
  }
]